https://leetcode.com/problems/maximum-product-subarray/description/

Traversing arrays forward and backward: Time O(2n)=O(n)

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxproduct=INT_MIN;
        int n=nums.size();
        int product=1;
        for(int i=0;i<n;i++)
        {
            product*=nums[i];
            maxproduct=max(maxproduct,product);
            if(product==0)
            product=1;
        }
        product=1;
        for(int i=n-1;i>0;i--)
        {
            product*=nums[i];
            maxproduct=max(maxproduct,product);
            if(product==0)
            product=1;
        }
        return maxproduct;
    }
};


Traversing array single time: Time O(n)

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxproduct=INT_MIN,lmax,lmin;
        lmin=0;
        lmax=1;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(lmin<0 && lmax==0)
            {
                lmax=1;
            }
            if(lmax==0)
            {
                lmin=0;
                lmax=1;
            }
            lmin*=nums[i];
            lmax*=nums[i];   
            if(lmax<lmin)
            {
                int t=lmin;
                lmin=lmax;
                lmax=t;
            }
            if(lmax>maxproduct)
                maxproduct=lmax;         
        }
        return (n==1?nums[0]:maxproduct);
    }
};
